#!/usr/bin/env ruby

require File.dirname(__FILE__) + '/../lib/tunl'
require 'thor'

module Tunl
	
	class CLI < Thor
		
		desc "start <name>", "launch named tunnel"
		method_options :check => :string, :port => :string, :verbose => :boolean
		def start(name)                 
			printf("\n%-3s %-8s %-20s\n\n", '~~>', "Start", "Tunnel: #{name}")
			tunl = Tunl::Base.new
			tunl.setup_security_group(name)
			tunl.setup_key_pair(name)
			tunl.setup_instance(name)    
			
			instance = tunl.find_instance(name)
			port = options[:port] || 3000
			if options[:verbose]
				verbose = "-v"
			else
				verbose = ''
			end
			
			if uri = options[:check]
				tunl.log("check", "#{instance[:dns_name]}#{uri}")
				t = Thread.new do
					loop do
						`curl http://#{instance[:dns_name]}#{uri} > /dev/null 2>&1`
							puts "."
							sleep 60
					end
				end
			end
			tunl.log("tunnel", "#{instance[:dns_name]}:80 -> localhost:#{port}")
			puts "\n\n"
			`ssh -i #{tunl.key_pair_filepath(name)} #{verbose} -N -p 22 root@#{instance[:dns_name]} -R *:80:localhost:#{port}`
		end
		
		desc "stop <name>", "terminate the named tunnel"
		def stop(name)
			tunl = Tunl::Base.new
			if instance = tunl.find_instance(name)
				printf("\n%-3s %-8s %-20s\n\n", '~~>', "Stop", "Tunnel: #{name}")
				tunl.delete_instance(name)
				tunl.delete_security_group(name)
				tunl.delete_key_pair(name)
				puts ""
			else
				puts "tunl #{name} not running"
			end
		end
		
		desc "list", "list all the tunnels"
		def list
			tunl = Tunl::Base.new
			instances = tunl.find_all_instances
			if instances.size==0
				puts "no running tunnels"
			else
				$stdout.printf("\n%-3s %-12s\n\n", '', 'Tunnels')
				$stdout.printf("%-3s %-12s %-12s %-12s\n\n", '', 'Name', 'Aws Id', 'Host')
				instances.each do |item|
					$stdout.printf("%-3s %-12s %-12s %-12s\n", '', item[:aws_groups].first.gsub('tunl_', ''), item[:aws_instance_id], item[:dns_name])
				end
				$stdout.puts("\n\n")
			end
		end
		
		no_tasks do

		end
		
	end
	
end

Tunl::CLI.start